{"version":3,"sources":["components/logo/brain.png","components/navigation/Navigation.js","components/logo/Logo.js","components/ImageLinkForm/ImageLinkForm.js","components/Rank/Rank.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","style","display","justifyContent","className","Logo","options","max","scale","height","width","src","brain","alt","ImageLinkForm","onInputChange","onButtonSubmit","type","aria-label","onChange","backgroundColor","onClick","Rank","FaceRecognition","lazy","app","Clarifai","App","apiKey","e","setState","input","target","value","calculateFaceLocation","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","querySelector","Number","leftCol","left_col","leftRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceBox","box","imageUrl","state","models","predict","then","response","catch","err","console","log","params","particles","number","density","enable","value_area","this","fallback","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","getElementById","URL","process","href","origin","addEventListener","fetch","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.62b48fda.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/brain.e0b4264e.png\";","import React from 'react';\r\n\r\nconst Navigation = () => {\r\n    return (\r\n        <nav style={{display: 'flex', justifyContent: 'flex-end'}}>\r\n            <p className=\"f3 dim black link underline pa3 pointer\">Sign Out</p>\r\n        </nav>\r\n    )\r\n}\r\nexport default Navigation;","import React from 'react';\r\nimport Tilt from 'react-tilt';\r\nimport './logo.css';\r\nimport brain from './brain.png';\r\n\r\nconst Logo = () => {\r\n    return (\r\n    \r\n    <div className='ma4 mt0'>\r\n        <Tilt \r\n            className=\"Tilt bw-3 shadow-2\" \r\n            options={{ max : 66, scale:1.2 }} \r\n            style={{ height: 150, width: 150 }} \r\n        >\r\n            <div className=\"Tilt-inner pa3\"> \r\n                <img src={brain} alt=\"logo\" />    \r\n             </div>\r\n        </Tilt>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Logo;","import React from 'react';\r\nimport './ImageLinkForm.css';\r\n\r\nconst ImageLinkForm = ( {onInputChange, onButtonSubmit} ) => {\r\n    return (\r\n        <div>\r\n            <p className='f3'>\r\n                This magic brain will detect faces in your pictures. Give it a try.\r\n            </p>\r\n            <div className='center'>\r\n                <div className='form center pa4 br3 shadow-3'>\r\n                    <input \r\n                        type='text' \r\n                        aria-label=\"Image Url\"\r\n                        className='f4 pa2 w-70 center glow' \r\n                        onChange={onInputChange}\r\n                    />\r\n                    <button \r\n                        className='w-30 grow link pointer f4 white bg-light-purple fw5'\r\n                        style={{backgroundColor: '#6B0FDB'}}\r\n                        onClick={onButtonSubmit}\r\n                    >\r\n                    Detect\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageLinkForm;\r\n","import React from 'react';\r\n\r\nconst Rank = () => {\r\n    return(\r\n        <div>\r\n            <div className='white f2'>\r\n                Nilkamal, your current rank is...\r\n            </div>\r\n            <div className='f1 white'>\r\n                #5\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Rank;","import React, { Component, lazy, Suspense } from 'react';\r\nimport './App.css';//for font family and background\r\nimport Clarifai from 'clarifai';\r\nimport Navigation from './components/navigation/Navigation';\r\nimport Logo from './components/logo/Logo';\r\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\r\nimport Rank from './components/Rank/Rank';\r\nimport Particles from 'react-particles-js';\r\nconst FaceRecognition = lazy(() => import('./components/FaceRecognition/FaceRecognition'));\r\n\r\nconst app = new Clarifai.App({\r\n  apiKey: '9f61eaa3458f43429dc92059903b2bdf'\r\n });\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      input: '',\r\n      imageUrl: '',\r\n      box: {}\r\n    }\r\n  }\r\n\r\n  onInputChange = (e) => {\r\n    this.setState({input: e.target.value});\r\n  }\r\n\r\n  calculateFaceLocation = (data) => {\r\n    const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\r\n    const image = document.querySelector('#inputimage');\r\n    const width = Number(image.width);\r\n    const height = Number(image.height);\r\n    return {\r\n      leftCol: clarifaiFace.left_col * width,\r\n      leftRow: clarifaiFace.top_row * height,\r\n      rightCol: width - (clarifaiFace.right_col * width),\r\n      bottomRow: height - (clarifaiFace.bottom_row * height)\r\n\r\n    }\r\n  }\r\n\r\n  displayFaceBox = (box) => {\r\n    this.setState({box});\r\n  }\r\n  onButtonSubmit = () => {\r\n    this.setState({imageUrl: this.state.input});\r\n    app.models.predict(\"a403429f2ddf4b49b307e318f00e528b\", this.state.input)\r\n    .then(response => this.displayFaceBox(this.calculateFaceLocation(response)))\r\n    .catch(err=>console.log(err));\r\n\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n      <Particles className='particles' params={{\r\n        particles: {\r\n          number:{value:100, density:{enable: true, value_area: 800}},\r\n\r\n        }\r\n      }} />\r\n          <Navigation />\r\n          <Logo />\r\n          <Rank />\r\n          <ImageLinkForm onInputChange={this.onInputChange} onButtonSubmit={this.onButtonSubmit}/>\r\n          <Suspense fallback={<p>Loading...</p>}>\r\n            <FaceRecognition box={this.state.box} imageUrl={this.state.imageUrl}/>\r\n          </Suspense>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}